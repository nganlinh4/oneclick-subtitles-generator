/* Material Web Switch Styling */

/* Import Material Symbols font for icons */
@import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL@20..48,100..700,0..1');

/* Global Material Web Switch theming */
md-switch {
  /* Use Material Design 3 color tokens */
  --md-switch-selected-track-color: var(--md-primary, #6750a4);
  --md-switch-selected-handle-color: var(--md-on-primary, #ffffff);
  --md-switch-selected-pressed-track-color: var(--md-primary, #6750a4);
  --md-switch-selected-pressed-handle-color: var(--md-on-primary, #ffffff);
  --md-switch-selected-hover-track-color: var(--md-primary, #6750a4);
  --md-switch-selected-hover-handle-color: var(--md-on-primary, #ffffff);
  --md-switch-selected-focus-track-color: var(--md-primary, #6750a4);
  --md-switch-selected-focus-handle-color: var(--md-on-primary, #ffffff);

  --md-switch-unselected-track-color: var(--md-surface-variant, #e7e0ec);
  --md-switch-unselected-handle-color: var(--md-outline, #79747e);
  --md-switch-unselected-pressed-track-color: var(--md-surface-variant, #e7e0ec);
  --md-switch-unselected-pressed-handle-color: var(--md-on-surface-variant, #49454f);
  --md-switch-unselected-hover-track-color: var(--md-surface-variant, #e7e0ec);
  --md-switch-unselected-hover-handle-color: var(--md-on-surface-variant, #49454f);
  --md-switch-unselected-focus-track-color: var(--md-surface-variant, #e7e0ec);
  --md-switch-unselected-focus-handle-color: var(--md-on-surface-variant, #49454f);

  --md-switch-disabled-selected-track-color: var(--md-on-surface, #1d1b20);
  --md-switch-disabled-selected-handle-color: var(--md-surface, #fef7ff);
  --md-switch-disabled-unselected-track-color: var(--md-on-surface, #1d1b20);
  --md-switch-disabled-unselected-handle-color: var(--md-on-surface, #1d1b20);

  /* Track and handle shape */
  --md-switch-track-shape: 16px;
  --md-switch-handle-shape: 50%;

  /* Track dimensions */
  --md-switch-track-width: 52px;
  --md-switch-track-height: 32px;

  /* Handle dimensions */
  --md-switch-handle-width: 24px;
  --md-switch-handle-height: 24px;
  --md-switch-selected-handle-width: 24px;
  --md-switch-selected-handle-height: 24px;

  /* Icon styling - Default check/close icons */
  --md-switch-icon-size: 16px;
  --md-switch-selected-icon-color: var(--md-on-primary, #ffffff);
  --md-switch-unselected-icon-color: var(--md-on-surface-variant, #49454f);
}

/* Container for switch with label */
.material-switch-container {
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
}

.material-switch-container:has(md-switch[disabled]) {
  cursor: not-allowed;
  opacity: 0.6;
}

/* Label styling */
.material-switch-label {
  font-size: var(--md-sys-typescale-body-medium-size, 0.875rem);
  font-weight: var(--md-sys-typescale-body-medium-weight, 400);
  line-height: var(--md-sys-typescale-body-medium-line-height, 1.25rem);
  color: var(--md-on-surface, #1d1b20);
  user-select: none;
}

/* Disabled label styling */
.material-switch-container:has(md-switch[disabled]) .material-switch-label {
  color: var(--md-on-surface-variant, #49454f);
}

/* Focus ring styling with enhanced icon visibility */
md-switch:focus-visible {
  outline: 2px solid var(--md-primary, #6750a4);
  outline-offset: 2px;
  border-radius: 20px;
}

/* Enhanced icon colors for focus state - better contrast */
md-switch[icons]:focus-visible svg[slot="on-icon"] {
  color: var(--md-primary, #6750a4);
  opacity: 0.9;
}

md-switch[icons]:focus-visible svg[slot="off-icon"] {
  color: var(--md-on-surface, #1d1b20);
  opacity: 0.9;
}

/* Focus state for selected switch */
md-switch[icons]:focus-visible[selected] svg[slot="on-icon"] {
  color: var(--md-primary, #6750a4);
  opacity: 1;
}

/* Focus state for unselected switch */
md-switch[icons]:focus-visible:not([selected]) svg[slot="off-icon"] {
  color: var(--md-on-surface, #1d1b20);
  opacity: 1;
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  md-switch {
    --md-switch-selected-track-color: var(--md-primary, #0000ff);
    --md-switch-unselected-track-color: var(--md-outline, #000000);
    --md-switch-selected-handle-color: var(--md-on-primary, #ffffff);
    --md-switch-unselected-handle-color: var(--md-on-surface, #000000);
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  md-switch {
    --md-switch-transition-duration: 0ms;
  }
}

/* Dark theme support */
@media (prefers-color-scheme: dark) {

  md-switch {
    /* Selected States (On) */
    --md-switch-selected-track-color: var(--md-primary, #d0bcff);
    --md-switch-selected-handle-color: var(--md-on-primary, #381e72);
    --md-switch-selected-pressed-track-color: var(--md-primary, #d0bcff);
    --md-switch-selected-pressed-handle-color: var(--md-on-primary, #381e72);
    --md-switch-selected-hover-track-color: var(--md-primary, #d0bcff);
    --md-switch-selected-hover-handle-color: var(--md-on-primary, #381e72);
    --md-switch-selected-focus-track-color: var(--md-primary, #d0bcff);
    --md-switch-selected-focus-handle-color: var(--md-on-primary, #381e72);

    /* Unselected States (Off) */
    --md-switch-unselected-track-color: var(--md-surface-variant, #49454f);
    --md-switch-unselected-handle-color: var(--md-outline, #938f99);
    --md-switch-unselected-pressed-track-color: var(--md-surface-variant, #49454f);
    --md-switch-unselected-pressed-handle-color: var(--md-on-surface-variant, #cac4d0);
    --md-switch-unselected-hover-track-color: var(--md-surface-variant, #49454f);
    --md-switch-unselected-hover-handle-color: var(--md-on-surface-variant, #cac4d0);
    --md-switch-unselected-focus-track-color: var(--md-surface-variant, #49454f);
    --md-switch-unselected-focus-handle-color: var(--md-on-surface-variant, #cac4d0);

    /* Disabled States */
    --md-switch-disabled-selected-track-color: var(--md-on-surface, #e6e0e9);
    --md-switch-disabled-selected-handle-color: var(--md-surface, #141218);
    --md-switch-disabled-unselected-track-color: var(--md-on-surface, #e6e0e9);
    --md-switch-disabled-unselected-handle-color: var(--md-on-surface, #e6e0e9);

    /* --- ICON COLOR CORRECTION --- */
    /* Light icon on dark handle (for "on" state) */
    --md-switch-selected-icon-color: var(--md-primary, #d0bcff);
    /* Nearly-black icon on light gray handle (for "off" state) for HIGH CONTRAST */
    --md-switch-unselected-icon-color: var(--md-surface, #141218);
  }

  .material-switch-label {
    color: var(--md-on-surface, #e6e0e9);
  }

  .material-switch-container:has(md-switch[disabled]) .material-switch-label {
    color: var(--md-on-surface-variant, #938f99);
  }

  /* Dark theme focus state icon colors - better contrast */
  md-switch[icons]:focus-visible svg[slot="on-icon"] {
    color: var(--md-primary, #d0bcff);
    opacity: 0.9;
  }

  md-switch[icons]:focus-visible svg[slot="off-icon"] {
    color: var(--md-on-surface, #e6e0e9);
    opacity: 0.9;
  }

  md-switch[icons]:focus-visible[selected] svg[slot="on-icon"] {
    color: var(--md-primary, #d0bcff);
    opacity: 1;
  }

  md-switch[icons]:focus-visible:not([selected]) svg[slot="off-icon"] {
    color: var(--md-on-surface, #e6e0e9);
    opacity: 1;
  }
}

/* Compact switch variant */
.material-switch-compact md-switch {
  --md-switch-track-width: 44px;
  --md-switch-track-height: 24px;
  --md-switch-handle-width: 20px;
  --md-switch-handle-height: 20px;
  --md-switch-selected-handle-width: 20px;
  --md-switch-selected-handle-height: 20px;
  --md-switch-icon-size: 12px;
}

/* Large switch variant */
.material-switch-large md-switch {
  --md-switch-track-width: 60px;
  --md-switch-track-height: 36px;
  --md-switch-handle-width: 28px;
  --md-switch-handle-height: 28px;
  --md-switch-selected-handle-width: 28px;
  --md-switch-selected-handle-height: 28px;
  --md-switch-icon-size: 20px;
}

/* Ensure slotted icons are properly styled */
md-switch[icons] svg[slot="on-icon"],
md-switch[icons] svg[slot="off-icon"] {
  width: var(--md-switch-icon-size, 16px);
  height: var(--md-switch-icon-size, 16px);
  fill: currentColor;
}

/* Icon colors for different states - contrast with thumb background */
md-switch[icons] svg[slot="on-icon"] {
  color: var(--md-switch-selected-icon-color, var(--md-primary, #6750a4));
}

md-switch[icons] svg[slot="off-icon"] {
  color: var(--md-switch-unselected-icon-color, var(--md-on-surface, #1d1b20));
}

/* High contrast mode - ensure maximum contrast with thumb */
@media (prefers-contrast: high) {
  md-switch[icons] svg[slot="on-icon"] {
    color: #000000; /* Black icon on white/light thumb */
  }

  md-switch[icons] svg[slot="off-icon"] {
    color: #000000; /* Black icon on white/light thumb */
  }

  /* High contrast focus states */
  md-switch[icons]:focus-visible svg[slot="on-icon"] {
    color: #000000;
    opacity: 1;
  }

  md-switch[icons]:focus-visible svg[slot="off-icon"] {
    color: #000000;
    opacity: 1;
  }
}

/* Ensure unselected state has no background on the track pseudo element */
/* Try multiple selectors to cope with Shadow DOM/parts implementations */
.unselected md-switch .track::before,
md-switch.unselected .track::before,
.unselected md-switch::part(track)::before,
md-switch.unselected::part(track)::before {
  background: none !important;
  background-color: transparent !important;
}

/* Aggressive overrides to neutralize unselected track visuals, even vs constructed stylesheets */
/* Apply to both light-DOM guesses and exposed parts to cover different md-switch builds */
.unselected md-switch .track::before,
.unselected md-switch .track::after,
md-switch.unselected .track::before,
md-switch.unselected .track::after {
  background: none !important;
  background-color: transparent !important;
  background-image: none !important;
}

/* Prefer ::part when available (Shadow DOM safe) */
.unselected md-switch::part(track),
md-switch.unselected::part(track),
.unselected md-switch::part(track)::before,
md-switch.unselected::part(track)::before,
.unselected md-switch::part(track)::after,
md-switch.unselected::part(track)::after {
  background: none !important;
  background-color: transparent !important;
  background-image: none !important;
}

/* Override component CSS variables that feed track styling (background only) */
.unselected md-switch,
md-switch.unselected {
  --md-switch-unselected-track-color: transparent !important;
  --md-switch-unselected-pressed-track-color: transparent !important;
  --md-switch-unselected-hover-track-color: transparent !important;
  --md-switch-unselected-focus-track-color: transparent !important;
  /* Some builds read generic track vars; set those too */
  --md-switch-track-color: transparent !important;
}

/* Attribute-based fallback: neutralize when md-switch is not selected (no class dependency) */
md-switch:not([selected])::part(track),
md-switch:not([selected])::part(track)::before,
md-switch:not([selected])::part(track)::after,
md-switch:not([selected]) .track::before,
md-switch:not([selected]) .track::after {
  background: none !important;
  background-color: transparent !important;
  background-image: none !important;
}

/* Force variables for unselected state via attribute selector too */
md-switch:not([selected]) {
  --md-switch-unselected-track-color: transparent !important;
  --md-switch-unselected-pressed-track-color: transparent !important;
  --md-switch-unselected-hover-track-color: transparent !important;
  --md-switch-unselected-focus-track-color: transparent !important;
  --md-switch-track-color: transparent !important;
}

/* Clear background on hover for unselected state (keep border) */
.unselected:hover md-switch .track::before,
.unselected:hover md-switch .track::after,
md-switch.unselected:hover .track::before,
md-switch.unselected:hover .track::after {
  background: none !important;
  background-color: transparent !important;
  background-image: none !important;
}

/* Shadow DOM safe hover handling via ::part */
.unselected:hover md-switch::part(track),
md-switch.unselected:hover::part(track),
.unselected:hover md-switch::part(track)::before,
md-switch.unselected:hover::part(track)::before,
.unselected:hover md-switch::part(track)::after,
md-switch.unselected:hover::part(track)::after {
  background: none !important;
  background-color: transparent !important;
  background-image: none !important;
}

/* Attribute-based fallback: hover while not selected */
md-switch:not([selected]):hover::part(track),
md-switch:not([selected]):hover::part(track)::before,
md-switch:not([selected]):hover::part(track)::after,
md-switch:not([selected]):hover .track::before,
md-switch:not([selected]):hover .track::after {
  background: none !important;
  background-color: transparent !important;
  background-image: none !important;
}


/* Ensure hover still uses transparent track color in unselected state via CSS variables */
md-switch.unselected:hover,
md-switch:not([selected]):hover {
  --md-switch-unselected-hover-track-color: transparent !important;
  --md-switch-hover-track-color: transparent !important;
  --md-switch-unselected-pressed-track-color: transparent !important;
  --md-switch-pressed-track-color: transparent !important;
  --md-switch-track-color: transparent !important;
}

/* In case external CSS (non-shadow) targets .unselected:hover .track::before directly */
.unselected:hover .track::before,
.unselected:hover .track::after {
  background: none !important;
  background-color: transparent !important;
  background-image: none !important;
}

/* Ensure variables flip to transparent when ancestor .unselected is hovered */
.unselected:hover md-switch {
  --md-switch-unselected-hover-track-color: transparent !important;
  --md-switch-hover-track-color: transparent !important;
  --md-switch-track-color: transparent !important;
}



